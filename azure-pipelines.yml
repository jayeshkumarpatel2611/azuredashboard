trigger: none

pool:
  vmImage: ubuntu-latest

stages:           
  - stage: 
    displayName: "Deploying Terraform Resources"
 
    jobs: 
      - job: 
        displayName: "Azure Workbooks and Dashboard Deployment"
        timeoutInMinutes: 180
        steps:
          - task: replacetokens@5
            displayName: Preparing_terraform.tfvars_and_main.tf
            inputs:
                targetFiles: | 
                  **/terraform.tfvars
                  **/main.tf
                encoding: 'auto'
                tokenPattern: 'custom'
                tokenPrefix: '#{'
                tokenSuffix: '}#'
                verbosity: 'detailed'

          - task: TerraformCLI@0
            displayName: "terraform init"
            enabled: true
            inputs:
              command: "init"
              backendServiceArm: $(serviceconn_name)
              backendType: "azurerm"
              backendAzureRmResourceGroupName: $(backend_resource_group)
              backendAzureRmStorageAccountName: $(backend_storage_account)
              backendAzureRmContainerName: $(backend_container_name)
              backendAzureRmKey: $(backend_tfstate_file_name)
              allowTelemetryCollection: true
              workingDirectory: $(System.DefaultWorkingDirectory)

          - task: TerraformCLI@0
            displayName: "terraform plan"
            enabled: true
            inputs:
              command: 'plan'
              workingDirectory: $(System.DefaultWorkingDirectory)
              environmentServiceName: $(serviceconn_name)
              commandOptions: '--out=tfplan'
              allowTelemetryCollection: true
            condition: succeeded()
                      
          - task: TerraformCLI@0
            displayName: "terraform apply"
            enabled: true  
            inputs:
              command: 'apply'
              workingDirectory: $(System.DefaultWorkingDirectory)
              environmentServiceName: $(serviceconn_name)
              commandOptions: 'tfplan'
              allowTelemetryCollection: true
            condition: and(succeeded(), eq(variables['TerraformApply'], 'True'))

          - task: TerraformCLI@0
            displayName: "terraform destroy"
            enabled: true
            inputs:
              command: 'destroy'
              workingDirectory: $(System.DefaultWorkingDirectory)
              environmentServiceName: $(serviceconn_name)
              allowTelemetryCollection: true
            condition: and(succeeded(), eq(variables['TerraformDestroy'], 'True'))