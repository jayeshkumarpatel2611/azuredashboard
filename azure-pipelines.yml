trigger: none

pool:
  vmImage: ubuntu-latest

variables:
  location: $(LOCATION)
  AppInsights: $(APPINSIGHTS)
  subscription_id: $(SUBSCRIPTION_ID)
  environment_name: $(ENVIRONMENT_NAME)
  client_name: $(CLIENT_NAME)
  resource_group_name: $(RESOURCE_GROUP_NAME)
  idn_tenant_id: $(IDN_TENANT_ID)
  env_code: $(ENV_CODE)
  serviceconn_name: $(SERVICECONN_NAME)
  backend_resource_group: $(BACKEND_RESOURCE_GROUP)
  backend_storage_account: $(BACKEND_STORAGE_ACCOUNT)
  backend_container_name: $(BACKEND_CONTAINER_NAME)
  backend_tfstate_file_name: $(BACKEND_TFSTATE_FILE_NAME)

stages:           
  - stage: 
    displayName: "Deploying Terraform Resources"
 
    jobs:
      - job: 
        timeoutInMinutes: 180
        steps:
          - task: replacetokens@5
            displayName: preparing_terraform.tfvars_and_main.tf
            inputs:
                targetFiles: | 
                  **/terraform.tfvars
                  **/main.tf
                encoding: 'auto'
                tokenPattern: 'custom'
                tokenPrefix: '#{'
                tokenSuffix: '}#'
                writeBOM: true
                verbosity: 'detailed'
                actionOnMissing: 'warn'
                keepToken: false
                actionOnNoFiles: 'continue'
                enableTransforms: false
                enableRecursion: false
                useLegacyPattern: false
                enableTelemetry: true

          - task: PowerShell@2
            displayName: 'Display Terraform.tfvars File' 
            enabled: true
            inputs:
                targetType: 'inline'
                script: |
                    get-content $(build.sourcesdirectory)/terraform.tfvars     

          - task: PowerShell@2
            displayName: 'Display main.tf File' 
            enabled: true
            inputs:
                targetType: 'inline'
                script: |
                    get-content $(build.sourcesdirectory)/main.tf   

          - task: TerraformCLI@0
            displayName: "terraform init"
            enabled: true
            inputs:
              command: "init"
              backendServiceArm: $(serviceconn_name)
              backendType: "azurerm"
              backendAzureRmResourceGroupName: $(backend_resource_group)
              backendAzureRmStorageAccountName: $(backend_storage_account)
              backendAzureRmContainerName: $(backend_container_name)
              backendAzureRmKey: $(backend_tfstate_file_name)
              allowTelemetryCollection: true
              workingDirectory: $(System.DefaultWorkingDirectory)

          - task: TerraformCLI@0
            displayName: "terraform plan"
            enabled: true
            inputs:
              command: 'plan'
              workingDirectory: $(System.DefaultWorkingDirectory)
              environmentServiceName: $(serviceconn_name)
              commandOptions: '--out=tfplan'
              allowTelemetryCollection: true
                      
          - task: TerraformCLI@0
            displayName: "terraform apply"
            enabled: true  
            inputs:
              command: 'apply'
              workingDirectory: $(System.DefaultWorkingDirectory)
              environmentServiceName: $(serviceconn_name)
              commandOptions: 'tfplan'
              allowTelemetryCollection: true
            condition: and(succeeded(), eq(variables['TerraformApply'], 'True'))

          - task: TerraformCLI@0
            displayName: "terraform destroy"
            enabled: true
            inputs:
              command: 'destroy'
              workingDirectory: $(System.DefaultWorkingDirectory)
              environmentServiceName: $(serviceconn_name)
              allowTelemetryCollection: true
            condition: and(succeeded(), eq(variables['TerraformDestroy'], 'True'))